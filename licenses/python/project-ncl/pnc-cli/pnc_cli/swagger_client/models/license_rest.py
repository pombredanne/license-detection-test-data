# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from datetime import datetime
from pprint import pformat
from six import iteritems
import re


class LicenseRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'full_name': 'str',
        'full_content': 'str',
        'ref_url': 'str',
        'short_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'full_name': 'fullName',
        'full_content': 'fullContent',
        'ref_url': 'refUrl',
        'short_name': 'shortName'
    }

    def __init__(self, id=None, full_name=None, full_content=None, ref_url=None, short_name=None):
        """
        LicenseRest - a model defined in Swagger
        """

        self._id = None
        self._full_name = None
        self._full_content = None
        self._ref_url = None
        self._short_name = None

        if id is not None:
          self.id = id
        if full_name is not None:
          self.full_name = full_name
        if full_content is not None:
          self.full_content = full_content
        if ref_url is not None:
          self.ref_url = ref_url
        if short_name is not None:
          self.short_name = short_name

    @property
    def id(self):
        """
        Gets the id of this LicenseRest.

        :return: The id of this LicenseRest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LicenseRest.

        :param id: The id of this LicenseRest.
        :type: int
        """

        self._id = id

    @property
    def full_name(self):
        """
        Gets the full_name of this LicenseRest.

        :return: The full_name of this LicenseRest.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this LicenseRest.

        :param full_name: The full_name of this LicenseRest.
        :type: str
        """

        self._full_name = full_name

    @property
    def full_content(self):
        """
        Gets the full_content of this LicenseRest.

        :return: The full_content of this LicenseRest.
        :rtype: str
        """
        return self._full_content

    @full_content.setter
    def full_content(self, full_content):
        """
        Sets the full_content of this LicenseRest.

        :param full_content: The full_content of this LicenseRest.
        :type: str
        """

        self._full_content = full_content

    @property
    def ref_url(self):
        """
        Gets the ref_url of this LicenseRest.

        :return: The ref_url of this LicenseRest.
        :rtype: str
        """
        return self._ref_url

    @ref_url.setter
    def ref_url(self, ref_url):
        """
        Sets the ref_url of this LicenseRest.

        :param ref_url: The ref_url of this LicenseRest.
        :type: str
        """

        self._ref_url = ref_url

    @property
    def short_name(self):
        """
        Gets the short_name of this LicenseRest.

        :return: The short_name of this LicenseRest.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """
        Sets the short_name of this LicenseRest.

        :param short_name: The short_name of this LicenseRest.
        :type: str
        """

        self._short_name = short_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LicenseRest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
